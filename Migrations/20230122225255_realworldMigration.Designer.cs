// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using realworldProject.DBModel;

#nullable disable

namespace realworldProject.Migrations
{
    [DbContext(typeof(MyDatabase))]
    [Migration("20230122225255_realworldMigration")]
    partial class realworldMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("realworldProject.Models.ArticlesFavoriets", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.HasKey("Username", "Slug");

                    b.ToTable("ArticlesFavoriets", (string)null);
                });

            modelBuilder.Entity("realworldProject.Models.ArticlesModel", b =>
                {
                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserModelUsername")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserModelUsername1")
                        .HasColumnType("TEXT");

                    b.HasKey("Slug");

                    b.HasIndex("UserModelUsername");

                    b.HasIndex("UserModelUsername1");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("realworldProject.Models.ArticlesTags", b =>
                {
                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tagname")
                        .HasColumnType("TEXT");

                    b.HasKey("Slug", "Tagname");

                    b.ToTable("ArticlesTags", (string)null);
                });

            modelBuilder.Entity("realworldProject.Models.FollowingModel", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("FollowingName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserModelUsername")
                        .HasColumnType("TEXT");

                    b.HasKey("Username", "FollowingName");

                    b.HasIndex("UserModelUsername");

                    b.ToTable("UserFollowing", (string)null);
                });

            modelBuilder.Entity("realworldProject.Models.UserModel", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Username");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("realworldProject.Models.ArticlesModel", b =>
                {
                    b.HasOne("realworldProject.Models.UserModel", null)
                        .WithMany("FavorietArticles")
                        .HasForeignKey("UserModelUsername");

                    b.HasOne("realworldProject.Models.UserModel", null)
                        .WithMany("MyArticles")
                        .HasForeignKey("UserModelUsername1");
                });

            modelBuilder.Entity("realworldProject.Models.FollowingModel", b =>
                {
                    b.HasOne("realworldProject.Models.UserModel", null)
                        .WithMany("Following")
                        .HasForeignKey("UserModelUsername");
                });

            modelBuilder.Entity("realworldProject.Models.UserModel", b =>
                {
                    b.Navigation("FavorietArticles");

                    b.Navigation("Following");

                    b.Navigation("MyArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
